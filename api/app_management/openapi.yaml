openapi: 3.0.3

info:
  title: CasaOS App Management API
  version: v2
  description: |
    <picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png">
        <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
        <img alt="CasaOS" src="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
    </picture>

    CasaOS App Management manages app lifecycle, including installing, uninstalling, starting, stopping, setting, etc.

    For issues and discussions, please visit the [GitHub repository](https://github.com/IceWhaleTech/CasaOS) or join [our Discord](https://discord.gg/knqAbbBbeX).

servers:
  - url: /v2/app_management

tags:
  - name: Common methods
    description: |-
      methods for common usage

  - name: AppStore methods
    description: |-
      methods for accessing local app store

  - name: Compose methods
    description: |-
      methods for managing compose app lifecycle

  - name: Container methods
    description: |-
      methods for managing container app lifecycle

  - name: Image methods
    description: |-
      methods for managing container app images

  - name: Internal methods
    description: |-
      methods for internal use ONLY

  - name: AppStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/AppStoreInfo" />

  - name: ComposeApp
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeApp" />

  - name: ComposeAppStoreInfoLists
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeAppStoreInfoLists" />

  - name: ComposeAppStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeAppStoreInfo" />

  - name: ContainerSummary
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ContainerSummary" />

  - name: ContainerStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ContainerStoreInfo" />

  - name: EnvStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/EnvStoreInfo" />

  - name: PortStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/PortStoreInfo" />

  - name: VolumeStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/VolumeStoreInfo" />

  - name: DeviceStoreInfo
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/DeviceStoreInfo" />

  - name: ComposeAppValidationErrors
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeAppValidationErrors" />

  - name: ComposeAppValidationErrorsPortsInUse
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeAppValidationErrorsPortsInUse" />

  - name: ComposeAppValidationErrorsPortsOutOfRange
    description: |-
      <SchemaDefinition schemaRef="#/components/schemas/ComposeAppValidationErrorsPortsOutOfRange" />

x-tagGroups:
  - name: Methods
    tags:
      - Common methods
      - AppStore methods
      - Compose methods
      - Container methods
      - Image methods

  - name: Schemas
    tags:
      - AppStoreInfo
      - ComposeApp
      - ComposeAppStoreInfoLists
      - ComposeAppStoreInfo
      - ContainerSummary
      - EnvStoreInfo
      - PortStoreInfo
      - VolumeStoreInfo
      - DeviceStoreInfo

  - name: Errors
    tags:
      - ComposeAppValidationErrorsPortsInUse
      - ComposeAppValidationErrorsPortsOutOfRange
      - ComposeAppValidationErrors

security:
  - access_token: []

paths:
  /info:
    get:
      summary: Get certain common information
      operationId: info
      tags:
        - Common methods
      responses:
        "200":
          $ref: "#/components/responses/InfoOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /convert:
    post:
      summary: Convert to compose app from another file format
      operationId: convert
      tags:
        - Common methods
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - appfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"

  /global:
    get:
      summary: Get all global settings
      operationId: getGlobalSettings
      tags:
        - Common methods
      responses:
        "200":
          $ref: "#/components/responses/GlobalSettingsOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /global/{key}:
    put:
      summary: Update a global setting
      operationId: updateGlobalSetting
      tags:
        - Common methods
      parameters:
        - $ref: "#/components/parameters/GlobalSettingKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalSetting"
      responses:
        "200":
          $ref: "#/components/responses/GlobalSettingOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    delete:
      summary: Delete a global setting
      operationId: deleteGlobalSetting
      tags:
        - Common methods
      parameters:
        - $ref: "#/components/parameters/GlobalSettingKey"
      responses:
        "200":
          $ref: "#/components/responses/ResponseOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    get:
      summary: Get a global setting
      operationId: getGlobalSetting
      tags:
        - Common methods
      parameters:
        - $ref: "#/components/parameters/GlobalSettingKey"
      responses:
        "200":
          $ref: "#/components/responses/GlobalSettingOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /appstore:
    get:
      summary: Get the list of registered app stores
      description: |
        (TODO)
      operationId: appStoreList
      tags:
        - AppStore methods
      responses:
        "200":
          $ref: "#/components/responses/AppStoreListOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    post:
      summary: Register an app store
      description: |
        (TODO)
      operationId: registerAppStore
      tags:
        - AppStore methods
      parameters:
        - $ref: "#/components/parameters/AppStoreURL"
      responses:
        "200":
          $ref: "#/components/responses/AppStoreRegisterOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /appstore/{id}:
    delete:
      summary: Unregister an app store
      description: |
        (TODO)
      operationId: unregisterAppStore
      tags:
        - AppStore methods
      parameters:
        - $ref: "#/components/parameters/AppStoreID"
      responses:
        "200":
          $ref: "#/components/responses/AppStoreUnregisterOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /categories:
    get:
      summary: Get the list of app categories
      description: |
        (TODO)
      operationId: CategoryList
      tags:
        - AppStore methods
      responses:
        "200":
          $ref: "#/components/responses/CategoryListOK"

  /apps:
    get:
      summary: Get app list from registered app stores
      description: |
        Get lists of StoreInfo of all compose apps from AppStore.
      operationId: composeAppStoreInfoList
      tags:
        - AppStore methods
      parameters:
        - $ref: "#/components/parameters/StoreAppCategoryFilter"
        - $ref: "#/components/parameters/StoreAppAuthorTypeFilter"
        - $ref: "#/components/parameters/StoreAppRecommendedFilter"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppStoreInfoListsOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /apps/{id}:
    get:
      summary: Get app info from registered app stores
      description: |
        Get StoreInfo of specific compose app.

        > A compose app contains one or more container `apps`. One of the `apps` is the `main` of this compose app, whereas others are dependency `apps`.
      operationId: composeAppStoreInfo
      tags:
        - AppStore methods
      parameters:
        - $ref: "#/components/parameters/StoreAppIDString"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppStoreInfoOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /apps/{id}/compose:
    get:
      summary: Get compose details of an app from registered app stores
      description: |
        Accept both `application/json` and `application/yaml` content type for the `Accept` header in the HTTP request.

        If the `Accept` header is set to `application/yaml`, the response will be the original `docker-compose.yml` content that follows [Compose Specification](https://compose-spec.io).
      operationId: composeApp
      tags:
        - AppStore methods
      parameters:
        - $ref: "#/components/parameters/StoreAppIDString"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose:
    get:
      summary: Get the list of installed compose apps
      description: |
        TODO - add description
      operationId: myComposeAppList
      tags:
        - Compose methods
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppListOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    post:
      summary: Install a compose app
      description: |
        Install a compose app from the Docker Compose YAML content provided in the request.

        > - The request has to be `content-type: application/yaml` and the body has to follow [Compose Specification](https://compose-spec.io).
        > - When `dry_run=true` is provided in the query string, it only validates the YAML content.

      operationId: installComposeApp
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/CheckPortConflict"
      requestBody:
        $ref: "#/components/requestBodies/RequestComposeApp"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppInstallOK"
        "400":
          $ref: "#/components/responses/ComposeAppBadRequest"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose/{id}:
    get:
      summary: Get compose details of a locally installed app
      description: |
        Accept both `application/json` and `application/yaml` content type for the `Accept` header in the HTTP request.

        If the `Accept` header is set to `application/yaml`, the response will be the interpolated `docker-compose.yml` content that follows [Compose Specification](https://compose-spec.io).

        > The difference between this and `/apps/{id}/compose` is that the compose detail returned has all environment variables interpolated. E.g. `$TZ` will be replaced by actual timezone text.
      operationId: myComposeApp
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    put:
      summary: Apply settings to a compose app
      description: |
        Apply settings to a compose app from the Docker Compose YAML content provided in the request.

        > - The request has to be `content-type: application/yaml` and the body has to follow [Compose Specification](https://compose-spec.io).
        > - When `dry_run=true` is provided in the query string, it only validates the YAML content.

      operationId: applyComposeAppSettings
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/CheckPortConflict"
      requestBody:
        $ref: "#/components/requestBodies/RequestComposeApp"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppUpdateSettingsOK"
        "400":
          $ref: "#/components/responses/ComposeAppBadRequest"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

    patch:
      summary: Update container images of compose app to match the compose app in AppStore.
      description: |
        TODO - add description
      operationId: updateComposeApp
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
        - $ref: "#/components/parameters/Force"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppUpdateOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Uninstall a compose app
      description: |
        TODO - add description
      operationId: uninstallComposeApp
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
        - $ref: "#/components/parameters/DeleteConfigFolder"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppUninstallOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose/{id}/status:
    put:
      summary: Start/restart/stop a compose app
      description: |
        TODO - add description
      operationId: setComposeAppStatus
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
      requestBody:
        $ref: "#/components/requestBodies/RequestComposeAppStatus"
      responses:
        "200":
          $ref: "#/components/responses/RequestComposeAppStatusOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose/{id}/containers:
    get:
      summary: Get the list of containers of a compose app
      description: |
        TODO - add description
      operationId: composeAppContainers
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppContainersOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose/{id}/logs:
    get:
      summary: Get the logs of a compose app
      description: |
        TODO - add description
      operationId: composeAppLogs
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
        - name: lines
          in: query
          description: |
            Number of lines to show from the end of the logs for each compose app.

            - show all logs if `-1`
          schema:
            type: integer
            default: 1000
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppLogsOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /compose/{id}/healthcheck:
    get:
      summary: Check if the compose app is running healthy
      description: |
        By default this method simply check if the `port_map` of the compose app returns `200 OK` status code.

        Custom health check procedure will be implemented in the future.
      operationId: checkComposeAppHealthByID
      tags:
        - Compose methods
      parameters:
        - $ref: "#/components/parameters/ComposeAppID"
      responses:
        "200":
          $ref: "#/components/responses/ComposeAppHealthCheckOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "503":
          $ref: "#/components/responses/ResponseServiceUnavailable"

  /container/{id}:
    patch:
      summary: Recreate the container app
      description: |
        TODO - add description
      operationId: recreateContainerByID
      tags:
        - Container methods
      parameters:
        - $ref: "#/components/parameters/ContainerID"
        - $ref: "#/components/parameters/PullLatestImage"
        - $ref: "#/components/parameters/Force"
      responses:
        "200":
          $ref: "#/components/responses/ContainerRecreateOK"
        "404":
          $ref: "#/components/responses/ResponseNotFound"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /container/{id}/healthcheck:
    get:
      deprecated: true
      summary: Check if the container app is running healthy
      description: |
        By default this method simply check if the WebUI port of the app returns `200 OK` status code.

        Custom health check procedure will be implemented in the future.

        > This method works for legacy apps running on CasaOS v0.4.3 and earlier.
        > For compose app, use `GET /compose/{id}/healthcheck` instead.
      operationId: checkContainerHealthByID
      tags:
        - Container methods
      parameters:
        - $ref: "#/components/parameters/ContainerID"
      responses:
        "200":
          $ref: "#/components/responses/ContainerHealthCheckOK"
        "503":
          $ref: "#/components/responses/ResponseServiceUnavailable"

  /image:
    post:
      summary: Post a batch pull request specified images
      description: |
        Post a request to pull one or more images asynchronously

        - by `container_ids` - pull images with the specific container IDs
        - by `names` - pull images with the specific image names (not implemented yet)
      operationId: pullImages
      tags:
        - Image methods
      parameters:
        - $ref: "#/components/parameters/ContainerIDs"
      responses:
        "200":
          $ref: "#/components/responses/PullImagesOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /web/appgrid:
    get:
      summary: (internal use ONLY)
      operationId: getAppGrid
      tags:
        - Internal methods
      responses:
        "200":
          $ref: "#/components/responses/GetWebAppGridOK"

components:
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization

  parameters:
    GlobalSettingKey:
      name: key
      description: Key of the global setting
      in: path
      required: true
      schema:
        type: string
        example: "OPENAI_API_KEY"

    AppStoreURL:
      name: url
      description: URL of the app store
      in: query
      schema:
        type: string
        example: "https://github.com/IceWhaleTech/CasaOS-AppStore"

    AppStoreID:
      name: id
      description: ID of the app store
      in: path
      required: true
      schema:
        type: integer
        example: 0

    StoreAppIDString:
      name: id
      description: Store app ID of a compose app (unique across all app stores)
      in: path
      required: true
      schema:
        type: string
        example: "syncthing"

    StoreAppCategoryFilter:
      name: category
      description: Category of the store app
      in: query
      schema:
        type: string
        example: "chat"

    StoreAppAuthorTypeFilter:
      name: author_type
      description: Author type of the store app
      in: query
      schema:
        $ref: "#/components/schemas/StoreAppAuthorType"

    StoreAppRecommendedFilter:
      name: recommend
      description: The store app is recommended
      in: query
      schema:
        type: boolean
        default: false

    ComposeAppID:
      name: id
      description: App ID of a compose app (equivalent to compose project name)
      in: path
      required: true
      schema:
        type: string
        example: "syncthing"

    ContainerIDs:
      name: container_ids
      description: a list of comma separated container IDs
      in: query
      schema:
        type: string
        example: "e4380876-d759-4b26-af1f-968a4606d399"

    ContainerID:
      name: id
      description: Container ID in the Docker runtime
      in: path
      required: true
      schema:
        type: string
      example: 09e70f4a7dd3fc43de6a1bc40d45c79f857544e13679e5b1a47409034a7ce621

    DeleteConfigFolder:
      name: delete_config_folder
      description: Delete the config folder of the app
      in: query
      schema:
        type: boolean
        default: true

    PullLatestImage:
      name: pull
      description: Try to pull the latest image from the registry
      in: query
      schema:
        type: boolean
        default: false

    Force:
      name: force
      in: query
      schema:
        type: boolean
        default: false

    DryRun:
      name: dry_run
      description: |
        Dry run the request without actually excuting it, useful for validation and testing.

        - `true` - validate only
        - `false` - validate and execute the request
      in: query
      schema:
        type: boolean
        default: false

    CheckPortConflict:
      name: check_port_conflict
      description: |
        Check if the port of the app conflicts with ports already in use.

        - `true` - check port conflict
        - `false` - skip port conflict check
      in: query
      schema:
        type: boolean
        default: true

  requestBodies:
    RequestComposeApp:
      description: Compose app YAML content
      required: true
      content:
        application/yaml:
          schema:
            $ref: "#/components/schemas/ComposeApp"
          example: |
            # docker compose YAML content
            services:
              ...
        application/json:
          schema:
            $ref: "#/components/schemas/ComposeApp"

    RequestComposeAppStatus:
      description: Compose app status
      required: true
      content:
        application/json:
          schema:
            type: string
            enum:
              - "start"
              - "restart"
              - "stop"

  responses:
    ResponseOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "OK"

    ResponseInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "Internal Server Error"

    ResponseNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "Not Found"

    ResponseBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "Bad Request"

    ResponseServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "Service Unavailable"

    InfoOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Info"

    GlobalSettingOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/GlobalSetting"

    GlobalSettingsOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/GlobalSetting"

    AppStoreListOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppStoreMetadata"

    AppStoreRegisterOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"

    AppStoreUnregisterOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"

    CategoryListOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CategoryInfo"

    ComposeAppStoreInfoListsOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ComposeAppStoreInfoLists"

    ComposeAppStoreInfoOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ComposeAppStoreInfo"

    ComposeAppListOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/ComposeAppWithStoreInfo"

    ComposeAppBadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ComposeAppValidationErrors"

    ComposeAppInstallOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ComposeAppUninstallOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ComposeAppUpdateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ComposeAppOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ComposeAppWithStoreInfo"
        application/yaml:
          schema:
            type: string

    ComposeAppUpdateSettingsOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    RequestComposeAppStatusOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"

    ComposeAppContainersOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ComposeAppContainers"

    ComposeAppLogsOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: string
                    example: <logs...>

    ComposeAppHealthCheckOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "pong"

    ContainerHealthCheckOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            message: "pong"

    ContainerRecreateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    PullImagesOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    GetWebAppGridOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/WebAppGridItem"
  schemas:
    BaseResponse:
      properties:
        message:
          description: message returned by server side if there is any
          type: string
          example: ""

    Info:
      properties:
        architecture:
          description: current architecture
          type: string
          readOnly: true
          example: "amd64"

    GlobalSetting:
      required:
        - key
        - value
      properties:
        key:
          description: key of the setting
          type: string
          readOnly: true
          example: "OPENAI_API_KEY"
        value:
          description: value of the setting
          type: string
          example: "sk-xxxxxxx"
        description:
          description: description of the setting
          type: string
          example: "OpenAI API Key"

    AppStoreMetadata:
      properties:
        id:
          type: integer
          minimum: 0
          readOnly: true
          x-go-name: ID
        url:
          type: string
          readOnly: true
          example: "https://github.com/IceWhaleTech/CasaOS-AppStore/archive/refs/heads/main.zip"
          x-go-name: URL
        store_root:
          type: string
          readOnly: true
          example: "CasaOS-AppStore-main"

    CategoryInfo:
      properties:
        id:
          type: integer
          minimum: 0
          readOnly: true
          x-go-name: ID
          example: 1
        name:
          type: string
          readOnly: true
          example: "Backup"
        font:
          type: string
          readOnly: true
          example: "backup-restore"
        count:
          type: integer
          minimum: 0
          readOnly: true
          example: 3
        description:
          type: string
          readOnly: true
          example: "File and Data Backup Apps"

    ComposeAppStoreInfoLists:
      properties:
        installed:
          type: array
          items:
            $ref: "#/components/schemas/StoreAppID"
        list:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ComposeAppStoreInfo"

    ComposeAppStoreInfo:
      required:
        - author
        - category
        - description
        - developer
        - icon
        - screenshot_link
        - tagline
        - thumbnail
        - title
        - tips
        - index
        - port_map
      properties:
        store_app_id:
          $ref: "#/components/schemas/StoreAppID"
        title:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Syncthing
        description:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Syncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it's transmitted over the internet.
        tagline:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Free, secure, and distributed file synchronisation tool.
        icon:
          type: string
          example: https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Syncthing/icon.png
        screenshot_link:
          type: array
          items:
            type: string
          example:
            - https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/OpenSpeedTest/screenshot-1.png
            - https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/OpenSpeedTest/screenshot-2.png
          x-oapi-codegen-extra-tags:
            mapstructure: "screenshot_link"
            yaml: "screenshot_link,omitempty"
        thumbnail:
          type: string
          example: https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Jellyfin/thumbnail.jpg
        author:
          type: string
          example: CasaOS Team
        developer:
          type: string
          example: Syncthing
        category:
          type: string
          example: Backup
        tips:
          $ref: "#/components/schemas/TipsStoreInfo"
        scheme:
          $ref: "#/components/schemas/Scheme"
        hostname:
          type: string
          example: ""
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        port_map:
          type: string
          example: "8384"
          x-oapi-codegen-extra-tags:
            mapstructure: "port_map"
            yaml: "port_map,omitempty"
        index:
          type: string
          example: "/"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        apps:
          title: store info of container apps included in the compose app
          description: |
            The key is the name of a container app, and the value is the StoreInfo of this container app.
          readOnly: true
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AppStoreInfo"
          example:
            syncthing: {}
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        main:
          title: name of the main service in `services`
          description: |
            The main service is one of the services that the user will interact with.
          type: string
          example: "syncthing"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        architectures:
          title: architectures supported by the compose app
          description: |
            The architectures supported by the compose app. If the architecture of the host is not in this list, the compose app will not be installed.
          type: array
          items:
            type: string
          example:
            - "amd64"
            - "arm64"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"

    ComposeApp:
      type: object
      description: |-
        See [Compose Specification](https://compose-spec.io) for the schema structure of `ComposeApp`.

      x-go-type: types.Project
      x-go-type-import:
        name: types
        path: github.com/compose-spec/compose-go/types

    ComposeAppWithStoreInfo:
      description: |-
        Schema for `ComposeAppOK` response.

        > Do not mistake it as `ComposeAppStoreInfo` which is just store information of a compose app.
      properties:
        store_info:
          $ref: "#/components/schemas/ComposeAppStoreInfo"
        compose:
          $ref: "#/components/schemas/ComposeApp"
        status:
          type: string
          readOnly: true
          example: running
        update_available:
          readOnly: true
          type: boolean
          example: true
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"

    ComposeAppValidationErrors:
      description: |-
        for list of `ComposeAppValidationErrors`, see **ERRORS** at the bottom of navigation bar.
      type: object
      readOnly: true
      anyOf:
        - $ref: "#/components/schemas/ComposeAppValidationErrorsPortsInUse"
        - $ref: "#/components/schemas/ComposeAppValidationErrorsPortsOutOfRange"

    ComposeAppValidationErrorsPortsInUse:
      description: |-
        This is one of the `ComposeAppValidationErrors` that can be included in the response body of compose app installation.
      type: object
      readOnly: true
      properties:
        ports_in_use:
          readOnly: true
          properties:
            TCP:
              $ref: "#/components/schemas/PortList"
            UDP:
              $ref: "#/components/schemas/PortList"

    ComposeAppValidationErrorsPortsOutOfRange:
      description: |-
        This is one of the `ComposeAppValidationErrors` that can be included in the response body of compose app installation.
      type: object
      readOnly: true
      properties:
        ports_out_of_range:
          readOnly: true
          type: array
          items:
            type: string
            example: "8384"

    AppStoreInfo:
      title: StoreInfo of an app
      description: |-
        > Do not mistake it as *information of AppStore* which does not exist.
      required:
        - envs
        - ports
        - volumes
        - devices
      properties:
        envs:
          type: array
          items:
            $ref: "#/components/schemas/EnvStoreInfo"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        ports:
          type: array
          items:
            $ref: "#/components/schemas/PortStoreInfo"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        volumes:
          type: array
          items:
            $ref: "#/components/schemas/VolumeStoreInfo"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"
        devices:
          type: array
          items:
            $ref: "#/components/schemas/DeviceStoreInfo"
          x-oapi-codegen-extra-tags:
            yaml: ",omitempty"

    ComposeAppContainers:
      description: |-
        Schema for `ComposeAppContainersOK` response.
      properties:
        main:
          type: string
          example: "syncthing"
        containers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ContainerSummary"
          example:
            "09e70f4a7dd3fc43de6a1bc40d45c79f857544e13679e5b1a47409034a7ce621":
              {}

    ContainerSummary:
      type: object
      description: |-
        See [Go Doc](https://pkg.go.dev/github.com/docker/compose/v2@v2.14.2/pkg/api#ContainerSummary) for the schema structure of `ContainerSummary`.

      x-go-type: api.ContainerSummary
      x-go-type-import:
        name: api
        path: github.com/docker/compose/v2/pkg/api

    EnvStoreInfo:
      required:
        - container
        - description
      properties:
        container:
          type: string
          example: TZ
        description:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Time Zone

    PortStoreInfo:
      required:
        - container
        - description
      properties:
        container:
          type: string
          example: 8384
        description:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Web UI

    PortList:
      type: array
      readOnly: true
      items:
        type: string
        example: "8384"

    VolumeStoreInfo:
      required:
        - container
        - description
      properties:
        container:
          type: string
          example: /config
        description:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: Syncthing config directory

    DeviceStoreInfo:
      properties:
        container:
          type: string
          example: /dev/dri
        description:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: GPU device

    TipsStoreInfo:
      required:
        - before_install
      properties:
        before_install:
          type: object
          additionalProperties:
            type: string
          example:
            en_us: |
              Tips for users before install.
          x-oapi-codegen-extra-tags:
            mapstructure: "before_install"
            yaml: "before_install,omitempty"
        custom:
          type: string
          example: "custom tips by user"
    Scheme:
      type: string
      default: http
      enum:
        - http
        - https
      x-oapi-codegen-extra-tags:
        yaml: ",omitempty"

    StoreAppID:
      title: Store app ID
      description: |
        Store app ID of the compose app (unique across all app stores)

        > The `store_app_id` might be same as app name most of the time. However app name might change, due to cloning for example.
        > If app name has changed, there is no way to associate it with the original app in the app store, unless we use the `store_app_id`.
      readOnly: true
      type: string
      example: "syncthing"
      x-go-name: StoreAppID
      x-oapi-codegen-extra-tags:
        mapstructure: "store_app_id"
        yaml: "store_app_id,omitempty"

    StoreAppAuthorType:
      title: Store app author type
      description: |
        Type of the author of the app

        - `official`: The app is contributed by the app owner, i.e. `author`` and `developer`` are the same.
        - `by_casaos`: The app is contributed by CasaOS team, i.e. `author` is `CasaOS Team`
        - `community`: The app is contributed by the community, i.e. any app that is not `official` or `by_casaos`
      readOnly: true
      type: string
      enum:
        - official
        - by_casaos
        - community
        - unknown
      x-enum-varnames:
        - AuthorTypeOfficial
        - AuthorTypeByCasaOS
        - AuthorTypeCommunity
        - AuthorTypeUnknown

    WebAppGridItem:
      description: (internal use ONLY)
      required:
        - app_type
      properties:
        store_app_id:
          $ref: "#/components/schemas/StoreAppID"
        scheme:
          $ref: "#/components/schemas/Scheme"
        status:
          type: string
          example: running
        name:
          type: string
        title:
          type: object
          additionalProperties:
            type: string
            example:
              en_us: Syncthing
        icon:
          type: string
          example: https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Syncthing/icon.png
        author_type:
          $ref: "#/components/schemas/StoreAppAuthorType"
        app_type:
          type: string
          enum:
            - v2app
            - v1app
            - container
            - link
        hostname:
          type: string
          example: ""
        port:
          type: string
          example: 3000
        index:
          type: string
          example: index
        image:
          type: string
          example: gitea/gitea:1
